// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "crm-uplift-ii24-backend/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	value "crm-uplift-ii24-backend/internal/domain/value"
)

// SendpostRepository is an autogenerated mock type for the SendpostRepository type
type SendpostRepository struct {
	mock.Mock
}

// DeleteSendpost provides a mock function with given fields: ctx, sendpostID
func (_m *SendpostRepository) DeleteSendpost(ctx context.Context, sendpostID uint) error {
	ret := _m.Called(ctx, sendpostID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSendpost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, sendpostID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFirstStage provides a mock function with given fields: ctx, sendpostID
func (_m *SendpostRepository) GetFirstStage(ctx context.Context, sendpostID uint) (*entity.Stage, error) {
	ret := _m.Called(ctx, sendpostID)

	if len(ret) == 0 {
		panic("no return value specified for GetFirstStage")
	}

	var r0 *entity.Stage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entity.Stage, error)); ok {
		return rf(ctx, sendpostID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entity.Stage); ok {
		r0 = rf(ctx, sendpostID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Stage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, sendpostID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSendpostByID provides a mock function with given fields: ctx, sendpostID
func (_m *SendpostRepository) GetSendpostByID(ctx context.Context, sendpostID uint) (*entity.Sendpost, error) {
	ret := _m.Called(ctx, sendpostID)

	if len(ret) == 0 {
		panic("no return value specified for GetSendpostByID")
	}

	var r0 *entity.Sendpost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entity.Sendpost, error)); ok {
		return rf(ctx, sendpostID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entity.Sendpost); ok {
		r0 = rf(ctx, sendpostID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Sendpost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, sendpostID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSendpostParameters provides a mock function with given fields: ctx, sendpostID
func (_m *SendpostRepository) GetSendpostParameters(ctx context.Context, sendpostID uint) (*value.JSONB, error) {
	ret := _m.Called(ctx, sendpostID)

	if len(ret) == 0 {
		panic("no return value specified for GetSendpostParameters")
	}

	var r0 *value.JSONB
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*value.JSONB, error)); ok {
		return rf(ctx, sendpostID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *value.JSONB); ok {
		r0 = rf(ctx, sendpostID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*value.JSONB)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, sendpostID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSendposts provides a mock function with given fields: ctx
func (_m *SendpostRepository) GetSendposts(ctx context.Context) ([]*entity.Sendpost, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSendposts")
	}

	var r0 []*entity.Sendpost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entity.Sendpost, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Sendpost); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Sendpost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveSendpost provides a mock function with given fields: ctx, sendpost
func (_m *SendpostRepository) SaveSendpost(ctx context.Context, sendpost *entity.Sendpost) error {
	ret := _m.Called(ctx, sendpost)

	if len(ret) == 0 {
		panic("no return value specified for SaveSendpost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Sendpost) error); ok {
		r0 = rf(ctx, sendpost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSendpostParameters provides a mock function with given fields: ctx, sendpostID, parameters
func (_m *SendpostRepository) UpdateSendpostParameters(ctx context.Context, sendpostID uint, parameters *map[string]interface{}) error {
	ret := _m.Called(ctx, sendpostID, parameters)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSendpostParameters")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, *map[string]interface{}) error); ok {
		r0 = rf(ctx, sendpostID, parameters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSendpostRepository creates a new instance of SendpostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSendpostRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SendpostRepository {
	mock := &SendpostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "crm-uplift-ii24-backend/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// StageRepository is an autogenerated mock type for the StageRepository type
type StageRepository struct {
	mock.Mock
}

// DeleteStage provides a mock function with given fields: ctx, stageID
func (_m *StageRepository) DeleteStage(ctx context.Context, stageID uint) error {
	ret := _m.Called(ctx, stageID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, stageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPreviousStage provides a mock function with given fields: ctx, stageID
func (_m *StageRepository) GetPreviousStage(ctx context.Context, stageID uint) (*entity.Stage, error) {
	ret := _m.Called(ctx, stageID)

	if len(ret) == 0 {
		panic("no return value specified for GetPreviousStage")
	}

	var r0 *entity.Stage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entity.Stage, error)); ok {
		return rf(ctx, stageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entity.Stage); ok {
		r0 = rf(ctx, stageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Stage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, stageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSendpostStages provides a mock function with given fields: ctx, sendpostID
func (_m *StageRepository) GetSendpostStages(ctx context.Context, sendpostID uint) ([]*entity.Stage, error) {
	ret := _m.Called(ctx, sendpostID)

	if len(ret) == 0 {
		panic("no return value specified for GetSendpostStages")
	}

	var r0 []*entity.Stage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]*entity.Stage, error)); ok {
		return rf(ctx, sendpostID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []*entity.Stage); ok {
		r0 = rf(ctx, sendpostID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Stage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, sendpostID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStageByID provides a mock function with given fields: ctx, stageID
func (_m *StageRepository) GetStageByID(ctx context.Context, stageID uint) (*entity.Stage, error) {
	ret := _m.Called(ctx, stageID)

	if len(ret) == 0 {
		panic("no return value specified for GetStageByID")
	}

	var r0 *entity.Stage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entity.Stage, error)); ok {
		return rf(ctx, stageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entity.Stage); ok {
		r0 = rf(ctx, stageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Stage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, stageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubStages provides a mock function with given fields: ctx, parentStageID
func (_m *StageRepository) GetSubStages(ctx context.Context, parentStageID uint) ([]*entity.Stage, error) {
	ret := _m.Called(ctx, parentStageID)

	if len(ret) == 0 {
		panic("no return value specified for GetSubStages")
	}

	var r0 []*entity.Stage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]*entity.Stage, error)); ok {
		return rf(ctx, parentStageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []*entity.Stage); ok {
		r0 = rf(ctx, parentStageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Stage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, parentStageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveStage provides a mock function with given fields: ctx, stage
func (_m *StageRepository) SaveStage(ctx context.Context, stage *entity.Stage) error {
	ret := _m.Called(ctx, stage)

	if len(ret) == 0 {
		panic("no return value specified for SaveStage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Stage) error); ok {
		r0 = rf(ctx, stage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStageRepository creates a new instance of StageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StageRepository {
	mock := &StageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

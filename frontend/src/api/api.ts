/* tslint:disable */
/* eslint-disable */
/**
 * OBSERVER backend
 * This is a backend for OBSERVER app.
 *
 * The version of the OpenAPI document: 1.2
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface RequestsParameters
 */
export interface RequestsParameters {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof RequestsParameters
     */
    'parameters': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface RequestsSenpost
 */
export interface RequestsSenpost {
    /**
     * 
     * @type {string}
     * @memberof RequestsSenpost
     */
    'description'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof RequestsSenpost
     */
    'global_parameters'?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof RequestsSenpost
     */
    'sendpost_name': string;
}
/**
 * 
 * @export
 * @interface RequestsStage
 */
export interface RequestsStage {
    /**
     * 
     * @type {string}
     * @memberof RequestsStage
     */
    'deployment_id': string;
    /**
     * 
     * @type {number}
     * @memberof RequestsStage
     */
    'previous_stage_id'?: number;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof RequestsStage
     */
    'stage_parameters'?: { [key: string]: any; };
    /**
     * 
     * @type {ValueStageType}
     * @memberof RequestsStage
     */
    'type': ValueStageType;
}


/**
 * 
 * @export
 * @interface ResponsesSendpost
 */
export interface ResponsesSendpost {
    /**
     * 
     * @type {string}
     * @memberof ResponsesSendpost
     */
    'description'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ResponsesSendpost
     */
    'global_parameters'?: { [key: string]: any; };
    /**
     * 
     * @type {number}
     * @memberof ResponsesSendpost
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ResponsesSendpost
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesSendpost
     */
    'state': string;
}
/**
 * 
 * @export
 * @interface ResponsesStage
 */
export interface ResponsesStage {
    /**
     * 
     * @type {number}
     * @memberof ResponsesStage
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof ResponsesStage
     */
    'is_blocked': boolean;
    /**
     * 
     * @type {ValueStateType}
     * @memberof ResponsesStage
     */
    'state': ValueStateType;
    /**
     * 
     * @type {ValueStageType}
     * @memberof ResponsesStage
     */
    'type': ValueStageType;
}


/**
 * 
 * @export
 * @interface ResponsesStageDetailed
 */
export interface ResponsesStageDetailed {
    /**
     * 
     * @type {string}
     * @memberof ResponsesStageDetailed
     */
    'deployment_id': string;
    /**
     * 
     * @type {number}
     * @memberof ResponsesStageDetailed
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ResponsesStageDetailed
     */
    'parent_stage_id'?: number;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ResponsesStageDetailed
     */
    'stage_parameters'?: { [key: string]: any; };
    /**
     * 
     * @type {ValueStateType}
     * @memberof ResponsesStageDetailed
     */
    'state': ValueStateType;
    /**
     * 
     * @type {ValueStageType}
     * @memberof ResponsesStageDetailed
     */
    'type': ValueStageType;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const ValueStageType = {
    ParallelStage: 'PARALLEL',
    SequentialStage: 'SEQUENTIAL',
    ObserverStage: 'OBSERVER'
} as const;

export type ValueStageType = typeof ValueStageType[keyof typeof ValueStageType];


/**
 * 
 * @export
 * @enum {string}
 */

export const ValueStateType = {
    Scheduled: 'SCHEDULED',
    Pending: 'PENDING',
    Running: 'RUNNING',
    Completed: 'COMPLETED',
    Failed: 'FAILED',
    Cancelled: 'CANCELLED',
    Crashed: 'CRASHED',
    Paused: 'PAUSED',
    Cancelling: 'CANCELLING',
    NeverRunning: 'NEVERRUNNING',
    Updated: 'UPDATED'
} as const;

export type ValueStateType = typeof ValueStateType[keyof typeof ValueStateType];



/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export const NotificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Establishes a WebSocket connection to receive status updates on sendpost execution.
         * @summary Connect to WebSocket notifications for sendpost execution
         * @param {number} sendpostId Sendpost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendpostsSendpostIdRunWsGet: async (sendpostId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendpostId' is not null or undefined
            assertParamExists('sendpostsSendpostIdRunWsGet', 'sendpostId', sendpostId)
            const localVarPath = `/sendposts/{sendpost_id}/run/ws`
                .replace(`{${"sendpost_id"}}`, encodeURIComponent(String(sendpostId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Establishes a WebSocket connection to receive status updates on sendpost execution.
         * @summary Connect to WebSocket notifications for sendpost execution
         * @param {number} sendpostId Sendpost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendpostsSendpostIdRunWsGet(sendpostId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendpostsSendpostIdRunWsGet(sendpostId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.sendpostsSendpostIdRunWsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationsApiFp(configuration)
    return {
        /**
         * Establishes a WebSocket connection to receive status updates on sendpost execution.
         * @summary Connect to WebSocket notifications for sendpost execution
         * @param {number} sendpostId Sendpost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendpostsSendpostIdRunWsGet(sendpostId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendpostsSendpostIdRunWsGet(sendpostId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export class NotificationsApi extends BaseAPI {
    /**
     * Establishes a WebSocket connection to receive status updates on sendpost execution.
     * @summary Connect to WebSocket notifications for sendpost execution
     * @param {number} sendpostId Sendpost ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public sendpostsSendpostIdRunWsGet(sendpostId: number, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).sendpostsSendpostIdRunWsGet(sendpostId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SendpostApi - axios parameter creator
 * @export
 */
export const SendpostApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add or update sendpost parameters by its ID
         * @summary Add or update sendpost parameters
         * @param {number} sendpostId Sendpost ID
         * @param {RequestsParameters} request Sendpost parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUpdateSendpostParameters: async (sendpostId: number, request: RequestsParameters, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendpostId' is not null or undefined
            assertParamExists('addUpdateSendpostParameters', 'sendpostId', sendpostId)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('addUpdateSendpostParameters', 'request', request)
            const localVarPath = `/sendposts/{sendpost_id}/parameters`
                .replace(`{${"sendpost_id"}}`, encodeURIComponent(String(sendpostId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Copies a sendpost by its ID
         * @summary Copy a sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {RequestsSenpost} request Sendpost creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copySendpost: async (sendpostId: number, request: RequestsSenpost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendpostId' is not null or undefined
            assertParamExists('copySendpost', 'sendpostId', sendpostId)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('copySendpost', 'request', request)
            const localVarPath = `/sendposts/{sendpost_id}`
                .replace(`{${"sendpost_id"}}`, encodeURIComponent(String(sendpostId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new sendpost with the specified parameters
         * @summary Create a sendpost
         * @param {RequestsSenpost} request Sendpost creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSendpost: async (request: RequestsSenpost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('createSendpost', 'request', request)
            const localVarPath = `/sendposts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a sendpost by its ID along with all associated stages
         * @summary Delete a sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSendpost: async (sendpostId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendpostId' is not null or undefined
            assertParamExists('deleteSendpost', 'sendpostId', sendpostId)
            const localVarPath = `/sendposts/{sendpost_id}`
                .replace(`{${"sendpost_id"}}`, encodeURIComponent(String(sendpostId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete sendpost parameter by its ID and key
         * @summary Delete sendpost parameter
         * @param {number} sendpostId Sendpost ID
         * @param {string} key Parameter key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSendpostParameter: async (sendpostId: number, key: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendpostId' is not null or undefined
            assertParamExists('deleteSendpostParameter', 'sendpostId', sendpostId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('deleteSendpostParameter', 'key', key)
            const localVarPath = `/sendposts/{sendpost_id}/parameters/{key}`
                .replace(`{${"sendpost_id"}}`, encodeURIComponent(String(sendpostId)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a sendpost with provided sendpost id
         * @summary Get a sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSendpost: async (sendpostId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendpostId' is not null or undefined
            assertParamExists('getSendpost', 'sendpostId', sendpostId)
            const localVarPath = `/sendposts/{sendpost_id}`
                .replace(`{${"sendpost_id"}}`, encodeURIComponent(String(sendpostId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get sendposts
         * @summary Get a sendposts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSendposts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sendposts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SendpostApi - functional programming interface
 * @export
 */
export const SendpostApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SendpostApiAxiosParamCreator(configuration)
    return {
        /**
         * Add or update sendpost parameters by its ID
         * @summary Add or update sendpost parameters
         * @param {number} sendpostId Sendpost ID
         * @param {RequestsParameters} request Sendpost parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUpdateSendpostParameters(sendpostId: number, request: RequestsParameters, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUpdateSendpostParameters(sendpostId, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendpostApi.addUpdateSendpostParameters']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Copies a sendpost by its ID
         * @summary Copy a sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {RequestsSenpost} request Sendpost creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async copySendpost(sendpostId: number, request: RequestsSenpost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesSendpost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.copySendpost(sendpostId, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendpostApi.copySendpost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new sendpost with the specified parameters
         * @summary Create a sendpost
         * @param {RequestsSenpost} request Sendpost creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSendpost(request: RequestsSenpost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesSendpost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSendpost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendpostApi.createSendpost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a sendpost by its ID along with all associated stages
         * @summary Delete a sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSendpost(sendpostId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSendpost(sendpostId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendpostApi.deleteSendpost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete sendpost parameter by its ID and key
         * @summary Delete sendpost parameter
         * @param {number} sendpostId Sendpost ID
         * @param {string} key Parameter key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSendpostParameter(sendpostId: number, key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSendpostParameter(sendpostId, key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendpostApi.deleteSendpostParameter']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a sendpost with provided sendpost id
         * @summary Get a sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSendpost(sendpostId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesSendpost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSendpost(sendpostId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendpostApi.getSendpost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get sendposts
         * @summary Get a sendposts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSendposts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResponsesSendpost>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSendposts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendpostApi.getSendposts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SendpostApi - factory interface
 * @export
 */
export const SendpostApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SendpostApiFp(configuration)
    return {
        /**
         * Add or update sendpost parameters by its ID
         * @summary Add or update sendpost parameters
         * @param {number} sendpostId Sendpost ID
         * @param {RequestsParameters} request Sendpost parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUpdateSendpostParameters(sendpostId: number, request: RequestsParameters, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.addUpdateSendpostParameters(sendpostId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * Copies a sendpost by its ID
         * @summary Copy a sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {RequestsSenpost} request Sendpost creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copySendpost(sendpostId: number, request: RequestsSenpost, options?: RawAxiosRequestConfig): AxiosPromise<ResponsesSendpost> {
            return localVarFp.copySendpost(sendpostId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new sendpost with the specified parameters
         * @summary Create a sendpost
         * @param {RequestsSenpost} request Sendpost creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSendpost(request: RequestsSenpost, options?: RawAxiosRequestConfig): AxiosPromise<ResponsesSendpost> {
            return localVarFp.createSendpost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a sendpost by its ID along with all associated stages
         * @summary Delete a sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSendpost(sendpostId: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteSendpost(sendpostId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete sendpost parameter by its ID and key
         * @summary Delete sendpost parameter
         * @param {number} sendpostId Sendpost ID
         * @param {string} key Parameter key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSendpostParameter(sendpostId: number, key: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteSendpostParameter(sendpostId, key, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a sendpost with provided sendpost id
         * @summary Get a sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSendpost(sendpostId: number, options?: RawAxiosRequestConfig): AxiosPromise<ResponsesSendpost> {
            return localVarFp.getSendpost(sendpostId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get sendposts
         * @summary Get a sendposts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSendposts(options?: RawAxiosRequestConfig): AxiosPromise<Array<ResponsesSendpost>> {
            return localVarFp.getSendposts(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SendpostApi - object-oriented interface
 * @export
 * @class SendpostApi
 * @extends {BaseAPI}
 */
export class SendpostApi extends BaseAPI {
    /**
     * Add or update sendpost parameters by its ID
     * @summary Add or update sendpost parameters
     * @param {number} sendpostId Sendpost ID
     * @param {RequestsParameters} request Sendpost parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendpostApi
     */
    public addUpdateSendpostParameters(sendpostId: number, request: RequestsParameters, options?: RawAxiosRequestConfig) {
        return SendpostApiFp(this.configuration).addUpdateSendpostParameters(sendpostId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Copies a sendpost by its ID
     * @summary Copy a sendpost
     * @param {number} sendpostId Sendpost ID
     * @param {RequestsSenpost} request Sendpost creation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendpostApi
     */
    public copySendpost(sendpostId: number, request: RequestsSenpost, options?: RawAxiosRequestConfig) {
        return SendpostApiFp(this.configuration).copySendpost(sendpostId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new sendpost with the specified parameters
     * @summary Create a sendpost
     * @param {RequestsSenpost} request Sendpost creation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendpostApi
     */
    public createSendpost(request: RequestsSenpost, options?: RawAxiosRequestConfig) {
        return SendpostApiFp(this.configuration).createSendpost(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a sendpost by its ID along with all associated stages
     * @summary Delete a sendpost
     * @param {number} sendpostId Sendpost ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendpostApi
     */
    public deleteSendpost(sendpostId: number, options?: RawAxiosRequestConfig) {
        return SendpostApiFp(this.configuration).deleteSendpost(sendpostId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete sendpost parameter by its ID and key
     * @summary Delete sendpost parameter
     * @param {number} sendpostId Sendpost ID
     * @param {string} key Parameter key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendpostApi
     */
    public deleteSendpostParameter(sendpostId: number, key: string, options?: RawAxiosRequestConfig) {
        return SendpostApiFp(this.configuration).deleteSendpostParameter(sendpostId, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a sendpost with provided sendpost id
     * @summary Get a sendpost
     * @param {number} sendpostId Sendpost ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendpostApi
     */
    public getSendpost(sendpostId: number, options?: RawAxiosRequestConfig) {
        return SendpostApiFp(this.configuration).getSendpost(sendpostId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get sendposts
     * @summary Get a sendposts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendpostApi
     */
    public getSendposts(options?: RawAxiosRequestConfig) {
        return SendpostApiFp(this.configuration).getSendposts(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SendpostRunnerApi - axios parameter creator
 * @export
 */
export const SendpostRunnerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Start the sendpost
         * @summary Start the sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendpostsSendpostIdRunPost: async (sendpostId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendpostId' is not null or undefined
            assertParamExists('sendpostsSendpostIdRunPost', 'sendpostId', sendpostId)
            const localVarPath = `/sendposts/{sendpost_id}/run`
                .replace(`{${"sendpost_id"}}`, encodeURIComponent(String(sendpostId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SendpostRunnerApi - functional programming interface
 * @export
 */
export const SendpostRunnerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SendpostRunnerApiAxiosParamCreator(configuration)
    return {
        /**
         * Start the sendpost
         * @summary Start the sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendpostsSendpostIdRunPost(sendpostId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendpostsSendpostIdRunPost(sendpostId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SendpostRunnerApi.sendpostsSendpostIdRunPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SendpostRunnerApi - factory interface
 * @export
 */
export const SendpostRunnerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SendpostRunnerApiFp(configuration)
    return {
        /**
         * Start the sendpost
         * @summary Start the sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendpostsSendpostIdRunPost(sendpostId: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.sendpostsSendpostIdRunPost(sendpostId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SendpostRunnerApi - object-oriented interface
 * @export
 * @class SendpostRunnerApi
 * @extends {BaseAPI}
 */
export class SendpostRunnerApi extends BaseAPI {
    /**
     * Start the sendpost
     * @summary Start the sendpost
     * @param {number} sendpostId Sendpost ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendpostRunnerApi
     */
    public sendpostsSendpostIdRunPost(sendpostId: number, options?: RawAxiosRequestConfig) {
        return SendpostRunnerApiFp(this.configuration).sendpostsSendpostIdRunPost(sendpostId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StageApi - axios parameter creator
 * @export
 */
export const StageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new stage to the specified sendpost. If `previous_stage_id` is provided adds stage after. If field `next_stage_id` in the previous_stage is not null changes `next_stage_id` in previous_stage on the new provided stage id. At the same time writes the new provided stage `next_stage_id` with previous_stage `next_stage_id` a.k.a this method allows insert stage between two stages. Field `type` could be `PARALLEL|SEQUENTIAL|OBSERVER`.
         * @summary Add a stage to a sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {RequestsStage} request Stage creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStageToSendpost: async (sendpostId: number, request: RequestsStage, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendpostId' is not null or undefined
            assertParamExists('addStageToSendpost', 'sendpostId', sendpostId)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('addStageToSendpost', 'request', request)
            const localVarPath = `/sendposts/{sendpost_id}/stages`
                .replace(`{${"sendpost_id"}}`, encodeURIComponent(String(sendpostId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a sub-stage to an existing parent stage. The sub-stage will be linked to the parent and can have deployment parameters. Could only add sub-stage to PARALLEL stage type.
         * @summary Add a sub-stage to a parent stage
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {RequestsStage} request Sub-stage creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubStage: async (sendpostId: number, stageId: number, request: RequestsStage, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendpostId' is not null or undefined
            assertParamExists('addSubStage', 'sendpostId', sendpostId)
            // verify required parameter 'stageId' is not null or undefined
            assertParamExists('addSubStage', 'stageId', stageId)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('addSubStage', 'request', request)
            const localVarPath = `/sendposts/{sendpost_id}/stages/{stage_id}/sub-stages`
                .replace(`{${"sendpost_id"}}`, encodeURIComponent(String(sendpostId)))
                .replace(`{${"stage_id"}}`, encodeURIComponent(String(stageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Block or unblock a stage by its ID.
         * @summary Block/Unblock a stage
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUnblockStage: async (sendpostId: number, stageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendpostId' is not null or undefined
            assertParamExists('blockUnblockStage', 'sendpostId', sendpostId)
            // verify required parameter 'stageId' is not null or undefined
            assertParamExists('blockUnblockStage', 'stageId', stageId)
            const localVarPath = `/sendposts/{sendpost_id}/stages/{stage_id}`
                .replace(`{${"sendpost_id"}}`, encodeURIComponent(String(sendpostId)))
                .replace(`{${"stage_id"}}`, encodeURIComponent(String(stageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a stage by its ID. If the stage is linked to other stages, they will be updated accordingly.
         * @summary Delete a stage
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStage: async (sendpostId: number, stageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendpostId' is not null or undefined
            assertParamExists('deleteStage', 'sendpostId', sendpostId)
            // verify required parameter 'stageId' is not null or undefined
            assertParamExists('deleteStage', 'stageId', stageId)
            const localVarPath = `/sendposts/{sendpost_id}/stages/{stage_id}`
                .replace(`{${"sendpost_id"}}`, encodeURIComponent(String(sendpostId)))
                .replace(`{${"stage_id"}}`, encodeURIComponent(String(stageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all stages of a sendpost by its ID.
         * @summary Get stages of a sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSendpostStages: async (sendpostId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendpostId' is not null or undefined
            assertParamExists('getSendpostStages', 'sendpostId', sendpostId)
            const localVarPath = `/sendposts/{sendpost_id}/stages`
                .replace(`{${"sendpost_id"}}`, encodeURIComponent(String(sendpostId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get detailed information about a stage by its ID.
         * @summary Get stage detailed info
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStageDetailedInfo: async (sendpostId: number, stageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendpostId' is not null or undefined
            assertParamExists('getStageDetailedInfo', 'sendpostId', sendpostId)
            // verify required parameter 'stageId' is not null or undefined
            assertParamExists('getStageDetailedInfo', 'stageId', stageId)
            const localVarPath = `/sendposts/{sendpost_id}/stages/{stage_id}`
                .replace(`{${"sendpost_id"}}`, encodeURIComponent(String(sendpostId)))
                .replace(`{${"stage_id"}}`, encodeURIComponent(String(stageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the sub-stages of the specified stage.
         * @summary Get parallel stage sub-stages
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubStages: async (sendpostId: number, stageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendpostId' is not null or undefined
            assertParamExists('getSubStages', 'sendpostId', sendpostId)
            // verify required parameter 'stageId' is not null or undefined
            assertParamExists('getSubStages', 'stageId', stageId)
            const localVarPath = `/sendposts/{sendpost_id}/stages/{stage_id}/sub-stages`
                .replace(`{${"sendpost_id"}}`, encodeURIComponent(String(sendpostId)))
                .replace(`{${"stage_id"}}`, encodeURIComponent(String(stageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update parameters of a stage by its ID.
         * @summary Update stage parameters
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {RequestsParameters} parameters Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStageParameters: async (sendpostId: number, stageId: number, parameters: RequestsParameters, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendpostId' is not null or undefined
            assertParamExists('updateStageParameters', 'sendpostId', sendpostId)
            // verify required parameter 'stageId' is not null or undefined
            assertParamExists('updateStageParameters', 'stageId', stageId)
            // verify required parameter 'parameters' is not null or undefined
            assertParamExists('updateStageParameters', 'parameters', parameters)
            const localVarPath = `/sendposts/{sendpost_id}/stages/{stage_id}`
                .replace(`{${"sendpost_id"}}`, encodeURIComponent(String(sendpostId)))
                .replace(`{${"stage_id"}}`, encodeURIComponent(String(stageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StageApi - functional programming interface
 * @export
 */
export const StageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StageApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new stage to the specified sendpost. If `previous_stage_id` is provided adds stage after. If field `next_stage_id` in the previous_stage is not null changes `next_stage_id` in previous_stage on the new provided stage id. At the same time writes the new provided stage `next_stage_id` with previous_stage `next_stage_id` a.k.a this method allows insert stage between two stages. Field `type` could be `PARALLEL|SEQUENTIAL|OBSERVER`.
         * @summary Add a stage to a sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {RequestsStage} request Stage creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addStageToSendpost(sendpostId: number, request: RequestsStage, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesStage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addStageToSendpost(sendpostId, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StageApi.addStageToSendpost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Adds a sub-stage to an existing parent stage. The sub-stage will be linked to the parent and can have deployment parameters. Could only add sub-stage to PARALLEL stage type.
         * @summary Add a sub-stage to a parent stage
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {RequestsStage} request Sub-stage creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSubStage(sendpostId: number, stageId: number, request: RequestsStage, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesStage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSubStage(sendpostId, stageId, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StageApi.addSubStage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Block or unblock a stage by its ID.
         * @summary Block/Unblock a stage
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blockUnblockStage(sendpostId: number, stageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blockUnblockStage(sendpostId, stageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StageApi.blockUnblockStage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a stage by its ID. If the stage is linked to other stages, they will be updated accordingly.
         * @summary Delete a stage
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStage(sendpostId: number, stageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStage(sendpostId, stageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StageApi.deleteStage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all stages of a sendpost by its ID.
         * @summary Get stages of a sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSendpostStages(sendpostId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResponsesStage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSendpostStages(sendpostId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StageApi.getSendpostStages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get detailed information about a stage by its ID.
         * @summary Get stage detailed info
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStageDetailedInfo(sendpostId: number, stageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesStageDetailed>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStageDetailedInfo(sendpostId, stageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StageApi.getStageDetailedInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the sub-stages of the specified stage.
         * @summary Get parallel stage sub-stages
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubStages(sendpostId: number, stageId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResponsesStage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubStages(sendpostId, stageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StageApi.getSubStages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update parameters of a stage by its ID.
         * @summary Update stage parameters
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {RequestsParameters} parameters Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStageParameters(sendpostId: number, stageId: number, parameters: RequestsParameters, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStageParameters(sendpostId, stageId, parameters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StageApi.updateStageParameters']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StageApi - factory interface
 * @export
 */
export const StageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StageApiFp(configuration)
    return {
        /**
         * Adds a new stage to the specified sendpost. If `previous_stage_id` is provided adds stage after. If field `next_stage_id` in the previous_stage is not null changes `next_stage_id` in previous_stage on the new provided stage id. At the same time writes the new provided stage `next_stage_id` with previous_stage `next_stage_id` a.k.a this method allows insert stage between two stages. Field `type` could be `PARALLEL|SEQUENTIAL|OBSERVER`.
         * @summary Add a stage to a sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {RequestsStage} request Stage creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStageToSendpost(sendpostId: number, request: RequestsStage, options?: RawAxiosRequestConfig): AxiosPromise<ResponsesStage> {
            return localVarFp.addStageToSendpost(sendpostId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a sub-stage to an existing parent stage. The sub-stage will be linked to the parent and can have deployment parameters. Could only add sub-stage to PARALLEL stage type.
         * @summary Add a sub-stage to a parent stage
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {RequestsStage} request Sub-stage creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubStage(sendpostId: number, stageId: number, request: RequestsStage, options?: RawAxiosRequestConfig): AxiosPromise<ResponsesStage> {
            return localVarFp.addSubStage(sendpostId, stageId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * Block or unblock a stage by its ID.
         * @summary Block/Unblock a stage
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUnblockStage(sendpostId: number, stageId: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.blockUnblockStage(sendpostId, stageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a stage by its ID. If the stage is linked to other stages, they will be updated accordingly.
         * @summary Delete a stage
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStage(sendpostId: number, stageId: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteStage(sendpostId, stageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all stages of a sendpost by its ID.
         * @summary Get stages of a sendpost
         * @param {number} sendpostId Sendpost ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSendpostStages(sendpostId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ResponsesStage>> {
            return localVarFp.getSendpostStages(sendpostId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get detailed information about a stage by its ID.
         * @summary Get stage detailed info
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStageDetailedInfo(sendpostId: number, stageId: number, options?: RawAxiosRequestConfig): AxiosPromise<ResponsesStageDetailed> {
            return localVarFp.getStageDetailedInfo(sendpostId, stageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the sub-stages of the specified stage.
         * @summary Get parallel stage sub-stages
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubStages(sendpostId: number, stageId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ResponsesStage>> {
            return localVarFp.getSubStages(sendpostId, stageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update parameters of a stage by its ID.
         * @summary Update stage parameters
         * @param {number} sendpostId Sendpost ID
         * @param {number} stageId Stage ID
         * @param {RequestsParameters} parameters Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStageParameters(sendpostId: number, stageId: number, parameters: RequestsParameters, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateStageParameters(sendpostId, stageId, parameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StageApi - object-oriented interface
 * @export
 * @class StageApi
 * @extends {BaseAPI}
 */
export class StageApi extends BaseAPI {
    /**
     * Adds a new stage to the specified sendpost. If `previous_stage_id` is provided adds stage after. If field `next_stage_id` in the previous_stage is not null changes `next_stage_id` in previous_stage on the new provided stage id. At the same time writes the new provided stage `next_stage_id` with previous_stage `next_stage_id` a.k.a this method allows insert stage between two stages. Field `type` could be `PARALLEL|SEQUENTIAL|OBSERVER`.
     * @summary Add a stage to a sendpost
     * @param {number} sendpostId Sendpost ID
     * @param {RequestsStage} request Stage creation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StageApi
     */
    public addStageToSendpost(sendpostId: number, request: RequestsStage, options?: RawAxiosRequestConfig) {
        return StageApiFp(this.configuration).addStageToSendpost(sendpostId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a sub-stage to an existing parent stage. The sub-stage will be linked to the parent and can have deployment parameters. Could only add sub-stage to PARALLEL stage type.
     * @summary Add a sub-stage to a parent stage
     * @param {number} sendpostId Sendpost ID
     * @param {number} stageId Stage ID
     * @param {RequestsStage} request Sub-stage creation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StageApi
     */
    public addSubStage(sendpostId: number, stageId: number, request: RequestsStage, options?: RawAxiosRequestConfig) {
        return StageApiFp(this.configuration).addSubStage(sendpostId, stageId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Block or unblock a stage by its ID.
     * @summary Block/Unblock a stage
     * @param {number} sendpostId Sendpost ID
     * @param {number} stageId Stage ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StageApi
     */
    public blockUnblockStage(sendpostId: number, stageId: number, options?: RawAxiosRequestConfig) {
        return StageApiFp(this.configuration).blockUnblockStage(sendpostId, stageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a stage by its ID. If the stage is linked to other stages, they will be updated accordingly.
     * @summary Delete a stage
     * @param {number} sendpostId Sendpost ID
     * @param {number} stageId Stage ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StageApi
     */
    public deleteStage(sendpostId: number, stageId: number, options?: RawAxiosRequestConfig) {
        return StageApiFp(this.configuration).deleteStage(sendpostId, stageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all stages of a sendpost by its ID.
     * @summary Get stages of a sendpost
     * @param {number} sendpostId Sendpost ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StageApi
     */
    public getSendpostStages(sendpostId: number, options?: RawAxiosRequestConfig) {
        return StageApiFp(this.configuration).getSendpostStages(sendpostId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get detailed information about a stage by its ID.
     * @summary Get stage detailed info
     * @param {number} sendpostId Sendpost ID
     * @param {number} stageId Stage ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StageApi
     */
    public getStageDetailedInfo(sendpostId: number, stageId: number, options?: RawAxiosRequestConfig) {
        return StageApiFp(this.configuration).getStageDetailedInfo(sendpostId, stageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the sub-stages of the specified stage.
     * @summary Get parallel stage sub-stages
     * @param {number} sendpostId Sendpost ID
     * @param {number} stageId Stage ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StageApi
     */
    public getSubStages(sendpostId: number, stageId: number, options?: RawAxiosRequestConfig) {
        return StageApiFp(this.configuration).getSubStages(sendpostId, stageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update parameters of a stage by its ID.
     * @summary Update stage parameters
     * @param {number} sendpostId Sendpost ID
     * @param {number} stageId Stage ID
     * @param {RequestsParameters} parameters Parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StageApi
     */
    public updateStageParameters(sendpostId: number, stageId: number, parameters: RequestsParameters, options?: RawAxiosRequestConfig) {
        return StageApiFp(this.configuration).updateStageParameters(sendpostId, stageId, parameters, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StageInfoApi - axios parameter creator
 * @export
 */
export const StageInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get parameters of a stage by its ID.
         * @summary Get stage parameters
         * @param {string} deploymentId Deployment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStageParameters: async (deploymentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deploymentId' is not null or undefined
            assertParamExists('getStageParameters', 'deploymentId', deploymentId)
            const localVarPath = `/prefectV2/{deployment_id}/parameters`
                .replace(`{${"deployment_id"}}`, encodeURIComponent(String(deploymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StageInfoApi - functional programming interface
 * @export
 */
export const StageInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StageInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * Get parameters of a stage by its ID.
         * @summary Get stage parameters
         * @param {string} deploymentId Deployment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStageParameters(deploymentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStageParameters(deploymentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StageInfoApi.getStageParameters']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StageInfoApi - factory interface
 * @export
 */
export const StageInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StageInfoApiFp(configuration)
    return {
        /**
         * Get parameters of a stage by its ID.
         * @summary Get stage parameters
         * @param {string} deploymentId Deployment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStageParameters(deploymentId: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.getStageParameters(deploymentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StageInfoApi - object-oriented interface
 * @export
 * @class StageInfoApi
 * @extends {BaseAPI}
 */
export class StageInfoApi extends BaseAPI {
    /**
     * Get parameters of a stage by its ID.
     * @summary Get stage parameters
     * @param {string} deploymentId Deployment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StageInfoApi
     */
    public getStageParameters(deploymentId: string, options?: RawAxiosRequestConfig) {
        return StageInfoApiFp(this.configuration).getStageParameters(deploymentId, options).then((request) => request(this.axios, this.basePath));
    }
}



